<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .status-bar {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .status-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            min-width: 200px;
            text-align: center;
        }

        .status-card h3 {
            color: #4a5568;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .status-running {
            background-color: #48bb78;
            animation: pulse 2s infinite;
        }

        .status-stopped {
            background-color: #f56565;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .card h2 {
            color: #2d3748;
            margin-bottom: 20px;
            font-size: 1.5rem;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 10px;
        }

        .data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .data-item {
            text-align: center;
            padding: 15px;
            background: #f7fafc;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
        }

        .data-item h4 {
            color: #4a5568;
            font-size: 0.9rem;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-item .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #2d3748;
        }

        .data-item .unit {
            font-size: 0.8rem;
            color: #718096;
            margin-left: 5px;
        }

        .section-title {
            font-size: 1.1rem;
            font-weight: 700;
            color: #2d3748;
            margin: 20px 0 10px 0;
            padding-bottom: 5px;
            border-bottom: 2px solid #e2e8f0;
        }

        .mppt-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .mppt-item {
            background: #edf2f7;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #cbd5e0;
        }

        .mppt-item h5 {
            font-size: 0.8rem;
            color: #4a5568;
            margin-bottom: 5px;
        }

        .mppt-item .value {
            font-size: 1.1rem;
            font-weight: bold;
            color: #2d3748;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: #4299e1;
            color: white;
        }

        .btn-primary:hover {
            background: #3182ce;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #68d391;
            color: white;
        }

        .btn-secondary:hover {
            background: #48bb78;
            transform: translateY(-2px);
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            color: white;
            opacity: 0.8;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #4a5568;
        }

        .error {
            background: #fed7d7;
            color: #c53030;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid #feb2b2;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .data-grid {
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåû PV Simulator Dashboard</h1>
            <p>Real-time Solar and Battery Energy Storage System Monitoring</p>
        </div>

        <div class="status-bar">
            <div class="status-card">
                <h3>PV1 System</h3>
                <span class="status-indicator status-running"></span>
                <span>Running on Port <%= pv1Port %></span>
            </div>
            <div class="status-card">
                <h3>PV2 System</h3>
                <span class="status-indicator status-running"></span>
                <span>Running on Port <%= pv2Port %></span>
            </div>
            <div class="status-card">
                <h3>Battery System</h3>
                <span class="status-indicator status-running"></span>
                <span>Running on Port <%= batteryPort %></span>
            </div>
        </div>

        <div class="dashboard-grid">
            <!-- PV1 System Card -->
            <div class="card">
                <h2>üîã PV1 System (50kW)</h2>
                <div id="pv1-data" class="loading">Loading PV1 data...</div>
            </div>

            <!-- PV2 System Card -->
            <div class="card">
                <h2>üîã PV2 System (50kW)</h2>
                <div id="pv2-data" class="loading">Loading PV2 data...</div>
            </div>

            <!-- Battery System Card -->
            <div class="card">
                <h2>üîã Battery System (100kW/200kWh)</h2>
                <div id="battery-data" class="loading">Loading battery data...</div>
            </div>

            <!-- MPPT Channels Card -->
            <div class="card">
                <h2>‚ö° MPPT Channels (7 Active)</h2>
                <div id="mppt-data" class="loading">Loading MPPT data...</div>
            </div>
        </div>

        <div class="controls">
            <button class="btn btn-primary" onclick="refreshData()">üîÑ Refresh Data</button>
            <button class="btn btn-secondary" onclick="toggleAutoRefresh()">‚è∏Ô∏è Toggle Auto-Refresh</button>
            <a href="/api/all/data" class="btn btn-primary" target="_blank">üìä API Data</a>
        </div>

        <div class="footer">
            <p>PV Simulator Node.js | Real-time Energy Monitoring System</p>
        </div>
    </div>

    <script>
        let autoRefresh = true;
        let refreshInterval;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            startAutoRefresh();
        });

        async function loadData() {
            try {
                console.log('Loading data...');
                
                // Load PV1 data
                const pv1Response = await fetch('/api/pv1/data');
                const pv1Data = await pv1Response.json();
                console.log('PV1 data:', pv1Data);
                displayPVData('pv1-data', pv1Data.data, 'PV1');

                // Load PV2 data
                const pv2Response = await fetch('/api/pv2/data');
                const pv2Data = await pv2Response.json();
                console.log('PV2 data:', pv2Data);
                displayPVData('pv2-data', pv2Data.data, 'PV2');

                // Load battery data
                const batteryResponse = await fetch('/api/battery/data');
                const batteryData = await batteryResponse.json();
                console.log('Battery data:', batteryData);
                displayBatteryData('battery-data', batteryData.data);

                // Load MPPT data
                displayMPPTData('mppt-data', pv1Data.data);

            } catch (error) {
                console.error('Error loading data:', error);
                showError('Error loading data. Please check if the server is running.');
            }
        }

        function displayPVData(containerId, data, systemName) {
            const container = document.getElementById(containerId);
            if (!data || Object.keys(data).length === 0) {
                container.innerHTML = '<div class="error">No data available</div>';
                return;
            }

            // Helper function to safely get values
            const getValue = (value, defaultValue = 0) => {
                return (value !== undefined && value !== null) ? value : defaultValue;
            };

            container.innerHTML = `
                <div class="data-grid">
                    <div class="data-item">
                        <h4>Input Power</h4>
                        <span class="value">${(getValue(data.input_power) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>Output Power</h4>
                        <span class="value">${(getValue(data.output_power) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>Input Voltage</h4>
                        <span class="value">${getValue(data.input_voltage).toFixed(1)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Input Current</h4>
                        <span class="value">${getValue(data.input_current).toFixed(1)}</span>
                        <span class="unit">A</span>
                    </div>
                    <div class="data-item">
                        <h4>Grid Voltage</h4>
                        <span class="value">${getValue(data.grid_voltage).toFixed(1)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Grid Current</h4>
                        <span class="value">${(getValue(data.grid_current) / 1000).toFixed(1)}</span>
                        <span class="unit">A</span>
                    </div>
                    <div class="data-item">
                        <h4>Grid Frequency</h4>
                        <span class="value">${getValue(data.grid_frequency).toFixed(2)}</span>
                        <span class="unit">Hz</span>
                    </div>
                    <div class="data-item">
                        <h4>Efficiency</h4>
                        <span class="value">${getValue(data.inverter_efficiency).toFixed(1)}</span>
                        <span class="unit">%</span>
                    </div>
                    <div class="data-item">
                        <h4>Temperature</h4>
                        <span class="value">${getValue(data.inverter_temperature).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                    <div class="data-item">
                        <h4>Daily Energy</h4>
                        <span class="value">${getValue(data.daily_energy).toFixed(2)}</span>
                        <span class="unit">kWh</span>
                    </div>
                    <div class="data-item">
                        <h4>Total Energy</h4>
                        <span class="value">${getValue(data.total_energy).toFixed(1)}</span>
                        <span class="unit">kWh</span>
                    </div>
                    <div class="data-item">
                        <h4>Runtime</h4>
                        <span class="value">${Math.floor(getValue(data.total_runtime) / 3600)}</span>
                        <span class="unit">h</span>
                    </div>
                </div>
            `;
        }

        function displayBatteryData(containerId, data) {
            const container = document.getElementById(containerId);
            if (!data || Object.keys(data).length === 0) {
                container.innerHTML = '<div class="error">No data available</div>';
                return;
            }

            // Helper function to safely get values
            const getValue = (value, defaultValue = 0) => {
                return (value !== undefined && value !== null) ? value : defaultValue;
            };

            container.innerHTML = `
                <div class="data-grid">
                    <div class="data-item">
                        <h4>Battery SOC</h4>
                        <span class="value">${(getValue(data.batterySOC) / 10).toFixed(1)}</span>
                        <span class="unit">%</span>
                    </div>
                    <div class="data-item">
                        <h4>Battery Voltage</h4>
                        <span class="value">${(getValue(data.batteryVoltage) / 10).toFixed(1)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Battery Current</h4>
                        <span class="value">${(getValue(data.batteryCurrent) / 10).toFixed(1)}</span>
                        <span class="unit">A</span>
                    </div>
                    <div class="data-item">
                        <h4>Battery Power</h4>
                        <span class="value">${(getValue(data.batteryPower) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>Load Power</h4>
                        <span class="value">${(getValue(data.loadPower) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>Grid Power</h4>
                        <span class="value">${(getValue(data.gridPower) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>PCS Power</h4>
                        <span class="value">${(getValue(data.pcsPower) / 1000).toFixed(1)}</span>
                        <span class="unit">kW</span>
                    </div>
                    <div class="data-item">
                        <h4>PCS Efficiency</h4>
                        <span class="value">${(getValue(data.pcsEfficiency) / 10).toFixed(1)}</span>
                        <span class="unit">%</span>
                    </div>
                    <div class="data-item">
                        <h4>Battery Temp</h4>
                        <span class="value">${(getValue(data.batteryTemperature) / 10).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                    <div class="data-item">
                        <h4>PCS Temp</h4>
                        <span class="value">${(getValue(data.pcsTemperature) / 10).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                    <div class="data-item">
                        <h4>System Status</h4>
                        <span class="value">${getStatusText(getValue(data.systemStatus))}</span>
                        <span class="unit"></span>
                    </div>
                    <div class="data-item">
                        <h4>Battery Status</h4>
                        <span class="value">${getStatusText(getValue(data.batteryStatus))}</span>
                        <span class="unit"></span>
                    </div>
                </div>
                <div class="section-title">Cell Monitoring</div>
                <div class="data-grid">
                    <div class="data-item">
                        <h4>Max Cell Voltage</h4>
                        <span class="value">${(getValue(data.maxCellVoltage1) / 1000).toFixed(3)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Min Cell Voltage</h4>
                        <span class="value">${(getValue(data.minCellVoltage1) / 1000).toFixed(3)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Avg Cell Voltage</h4>
                        <span class="value">${(getValue(data.avgCellVoltage) / 1000).toFixed(3)}</span>
                        <span class="unit">V</span>
                    </div>
                    <div class="data-item">
                        <h4>Max Cell Temp</h4>
                        <span class="value">${(getValue(data.maxCellTemperature1) / 100).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                    <div class="data-item">
                        <h4>Min Cell Temp</h4>
                        <span class="value">${(getValue(data.minCellTemperature1) / 100).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                    <div class="data-item">
                        <h4>Avg Cell Temp</h4>
                        <span class="value">${(getValue(data.avgCellTemperature) / 100).toFixed(1)}</span>
                        <span class="unit">¬∞C</span>
                    </div>
                </div>
            `;
        }

        function displayMPPTData(containerId, data) {
            const container = document.getElementById(containerId);
            if (!data || !data.mpptVoltages || !data.mpptCurrents) {
                container.innerHTML = '<div class="error">No MPPT data available</div>';
                return;
            }

            // Helper function to safely get values
            const getValue = (value, defaultValue = 0) => {
                return (value !== undefined && value !== null) ? value : defaultValue;
            };

            let mpptHtml = '<div class="mppt-grid">';
            for (let i = 0; i < 7; i++) { // Show only active channels
                const voltage = getValue(data.mpptVoltages[i]) / 10;
                const current = getValue(data.mpptCurrents[i]) / 10;
                const power = voltage * current;
                
                mpptHtml += `
                    <div class="mppt-item">
                        <h5>MPPT ${i + 1}</h5>
                        <div class="value">${voltage.toFixed(1)}V</div>
                        <div class="value">${current.toFixed(1)}A</div>
                        <div class="value">${power.toFixed(0)}W</div>
                    </div>
                `;
            }
            mpptHtml += '</div>';
            
            container.innerHTML = mpptHtml;
        }

        function getStatusText(status) {
            switch(status) {
                case 1: return 'Normal';
                case 2: return 'Warning';
                case 3: return 'Alarm';
                default: return 'Unknown';
            }
        }

        function showError(message) {
            const containers = ['pv1-data', 'pv2-data', 'battery-data', 'mppt-data'];
            containers.forEach(id => {
                const container = document.getElementById(id);
                if (container) {
                    container.innerHTML = `<div class="error">${message}</div>`;
                }
            });
        }

        function refreshData() {
            loadData();
        }

        function toggleAutoRefresh() {
            autoRefresh = !autoRefresh;
            if (autoRefresh) {
                startAutoRefresh();
            } else {
                stopAutoRefresh();
            }
        }

        function startAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
            refreshInterval = setInterval(loadData, 5000); // Refresh every 5 seconds
        }

        function stopAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
        }
    </script>
</body>
</html>
